# This // server.js (Node.js + Express)
const express = require('express');
const admin = require('firebase-admin');
const Razorpay = require('razorpay');
const bodyParser = require('body-parser');
const crypto = require('crypto');

const app = express();
app.use(bodyParser.json());

// initialize firebase admin with serviceAccountKey.json
admin.initializeApp({
  credential: admin.credential.cert(require('./serviceAccountKey.json'))
});
const db = admin.firestore();

// Razorpay config from env
const razorpay = new Razorpay({
  key_id: process.env.RP_KEY_ID,
  key_secret: process.env.RP_KEY_SECRET
});

// 1) create order
app.post('/createOrder', async (req, res) => {
  try {
    const { courseId, userId } = req.body;
    const courseRef = db.collection('courses').doc(courseId);
    const courseSnap = await courseRef.get();
    if (!courseSnap.exists) return res.status(404).json({error: 'course not found'});
    const course = courseSnap.data();
    const amountPaise = Math.round(course.priceINR * 100);

    const options = {
      amount: amountPaise,
      currency: "INR",
      receipt: `rcpt_${userId}_${Date.now()}`,
      payment_capture: 1
    };
    const order = await razorpay.orders.create(options);

    // Optionally store a pending purchase in Firestore
    await db.collection('users').doc(userId).collection('purchases').doc(order.id).set({
      courseId, orderId: order.id, amount: course.priceINR, status: 'created', createdAt: admin.firestore.FieldValue.serverTimestamp()
    });

    res.json({ orderId: order.id, amount: amountPaise, key: process.env.RP_KEY_ID });
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: 'server error' });
  }
});

// 2) verify payment
app.post('/verifyPayment', async (req, res) => {
  const { razorpay_payment_id, razorpay_order_id, razorpay_signature, userId } = req.body;
  const generated_signature = crypto.createHmac('sha256', process.env.RP_KEY_SECRET)
                                 .update(razorpay_order_id + "|" + razorpay_payment_id)
                                 .digest('hex');
  if (generated_signature !== razorpay_signature) {
    return res.status(400).json({ error: 'Invalid signature' });
  }
  // fetch pending purchase (by order id)
  try {
    // Find purchase doc with orderId == razorpay_order_id
    const purchasesRef = db.collectionGroup('purchases');
    const q = await purchasesRef.where('orderId', '==', razorpay_order_id).get();
    let purchaseDoc;
    if (!q.empty) {
      purchaseDoc = q.docs[0];
      await purchaseDoc.ref.update({
        paymentId: razorpay_payment_id,
        status: 'paid',
        verified: true,
        paidAt: admin.firestore.FieldValue.serverTimestamp()
      });

      const { courseId } = purchaseDoc.data();
      // Also add to user's purchases root (if not using subcollection)
      const userPurchasesRef = db.collection('users').doc(userId).collection('purchases').doc(razorpay_order_id);
      await userPurchasesRef.set({
        courseId, purchasedAt: admin.firestore.FieldValue.serverTimestamp(), razorpayOrderId: razorpay_order_id, razorpayPaymentId: razorpay_payment_id, verified: true
      });

      res.json({ success: true });
    } else {
      // fallback: create record
      await db.collection('users').doc(userId).collection('purchases').doc(razorpay_order_id).set({
        razorpayOrderId: razorpay_order_id, razorpayPaymentId: razorpay_payment_id, verified: true, purchasedAt: admin.firestore.FieldValue.serverTimestamp()
      });
      res.json({ success: true });
    }
  } catch (e) {
    console.error(e);
    res.status(500).json({ error: 'verification failed' });
  }
});

const PORT = process.env.PORT || 4000;
app.listen(PORT, ()=> console.log('Server running on', PORT));
 will build and push a node.js application to an Azure Web App when a commit is pushed to your default branch.
#
# This workflow assumes you have already created the target Azure App Service web app.
# For instructions see https://docs.microsoft.com/en-us/azure/app-service/quickstart-nodejs?tabs=linux&pivots=development-environment-cli
#
# To configure this workflow:
#
# 1. Download the Publish Profile for your Azure Web App. You can download this file from the Overview page of your Web App in the Azure Portal.
#    For more information: https://docs.microsoft.com/en-us/azure/app-service/deploy-github-actions?tabs=applevel#generate-deployment-credentials
#
# 2. Create a secret in your repository named AZURE_WEBAPP_PUBLISH_PROFILE, paste the publish profile contents as the value of the secret.
#    For instructions on obtaining the publish profile see: https://docs.microsoft.com/azure/app-service/deploy-github-actions#configure-the-github-secret
#
# 3. Change the value for the AZURE_WEBAPP_NAME. Optionally, change the AZURE_WEBAPP_PACKAGE_PATH and NODE_VERSION environment variables below.
#
# For more information on GitHub Actions for Azure: https://github.com/Azure/Actions
# For more information on the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# For more samples to get started with GitHub Action workflows to deploy to Azure: https://github.com/Azure/actions-workflow-samples

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

env:
  AZURE_WEBAPP_NAME: your-app-name    # set this to your application's name
  AZURE_WEBAPP_PACKAGE_PATH: '.'      # set this to the path to your web app project, defaults to the repository root
  NODE_VERSION: '20.x'                # set this to the node version to use

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: npm install, build, and test
      run: |
        npm install
        npm run build --if-present
        npm run test --if-present

    - name: Upload artifact for deployment job
      uses: actions/upload-artifact@v4
      with:
        name: node-app
        path: .

  deploy:
    permissions:
      contents: none
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Development'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
    - name: Download artifact from build job
      uses: actions/download-artifact@v4
      with:
        name: node-app

    - name: 'Deploy to Azure WebApp'
      id: deploy-to-webapp
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
        package: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}
